#!/usr/bin/python
# Copyright 2023 by Armoha.
# All rights reserved.
# This file is part of EUD python library (eudplib),
# and is released under "MIT License Agreement". Please see the LICENSE
# file that should have been included as part of this package.

class ObjAllocator:
    def WriteByte(self, number: int) -> None: ...
    def WriteWord(self, number: int) -> None: ...
    def WriteDword(self, number) -> None: ...
    def WritePack(self, structformat: str, _arglist: list) -> None: ...
    def WriteBytes(self, b: bytes) -> None: ...
    def WriteSpace(self, ssize: int) -> None: ...

class PayloadBuffer:
    def WriteByte(self, number: int) -> None: ...
    def WriteWord(self, number: int) -> None: ...
    def WriteDword(self, number) -> None: ...
    def WritePack(self, structformat: str, _arglist: list) -> None: ...
    def WriteBytes(self, b: bytes) -> None: ...
    def WriteSpace(self, ssize: int) -> None: ...

class PayloadBuilder:
    def __init__(self) -> None: ...
    def offset(self, index: int) -> int: ...
    def alloc_objects(self, found_objects: dict) -> None: ...
    def contruct_payload(
        self, found_objects: dict
    ) -> tuple[bytes, list[int], list[int]]: ...

class ConstExpr:
    def __init__(
        self, baseobj: "ConstExpr | None", offset: int, rlocmode: int
    ) -> None: ...
