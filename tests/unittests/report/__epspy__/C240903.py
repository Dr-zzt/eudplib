## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *
from eudplib.core.eudfunc import EUDTraceLog, EUDTracedFunc, EUDTracedTypedFunc, EUDTracedMethod, EUDTracedTypedMethod
from eudplib.epscript.helper import _RELIMP, _IGVA, _CGFW, _ARR, _VARR, _SRET, _SV, _ATTW, _ARRW, _ATTC, _ARRC, _L2V, _LVAR, _LSH, _ALL
# (Line 1) function updateUnitNameAndRank() {
@EUDFunc
def f_updateUnitNameAndRank():
    # (Line 3) const NAME_STR = EncodeString(py_eval("99 * '\\r'"));
    NAME_STR = EncodeString(eval("99 * '\\r'"))
    # (Line 6) const RANK_TBL = $B("Recruit (Rank)");
    RANK_TBL = EncodeTBL("Recruit (Rank)")
    # (Line 8) const LOCAL_UNIT_SELECT = EPD(0x6284B8);  // 선택한 유닛 (비공유)
    LOCAL_UNIT_SELECT = EPD(0x6284B8)
    # (Line 9) /* TEST */ dwwrite_epd(LOCAL_UNIT_SELECT, 0x59CCA8 + 336);
    f_dwwrite_epd(LOCAL_UNIT_SELECT, 0x59CCA8 + 336)
    # (Line 10) static var selectedUnitPtr, selectedUnitEpd = 0, 0;
    selectedUnitPtr, selectedUnitEpd = (EUDVariable(x) for x in (0, 0))
    # (Line 11) if (!MemoryEPD(LOCAL_UNIT_SELECT, Exactly, selectedUnitPtr)) {
    if EUDIf()(MemoryEPD(LOCAL_UNIT_SELECT, Exactly, selectedUnitPtr), neg=True):
        # (Line 12) selectedUnitPtr, selectedUnitEpd = cunitepdread_epd(LOCAL_UNIT_SELECT);
        _SV([selectedUnitPtr, selectedUnitEpd], [f_cunitepdread_epd(LOCAL_UNIT_SELECT)])
        # (Line 13) }
        # (Line 14) if (selectedUnitPtr == 0) return -1, -1;
    EUDEndIf()
    if EUDIf()(selectedUnitPtr == 0):
        EUDReturn(-1, -1)
        # (Line 15) /* TEST */ dwwrite_epd(LOCAL_UNIT_SELECT, 0);
    EUDEndIf()
    f_dwwrite_epd(LOCAL_UNIT_SELECT, 0)
    # (Line 16) const namePtr = GetMapStringAddr(NAME_STR);
    namePtr = GetMapStringAddr(NAME_STR)
    # (Line 17) var rankPtr;
    rankPtr = EUDVariable()
    # (Line 18) once rankPtr = GetTBLAddr(RANK_TBL);
    _t3 = EUDExecuteOnce()
    if _t3():
        rankPtr << (GetTBLAddr(RANK_TBL))
        # (Line 19) const unitTypes = py_list();
    EUDEndExecuteOnce()
    unitTypes = list()
    # (Line 20) const unit = CUnit(selectedUnitEpd, ptr=selectedUnitPtr);
    unit = CUnit(selectedUnitEpd, ptr=selectedUnitPtr)
    # (Line 22) const Ticket = EUDArray(py_range(8));
    Ticket = EUDArray(range(8))
    # (Line 23) const Ore = EUDArray(py_range(1, 17, 2));
    Ore = EUDArray(range(1, 17, 2))
    # (Line 24) const Gas = EUDArray(py_range(2, 26, 3));
    Gas = EUDArray(range(2, 26, 3))
    # (Line 26) /* TEST */ dwwrite(0x59CCA8 + 336 + 0x64, $U("Terran Academy"));
    f_dwwrite(0x59CCA8 + 336 + 0x64, EncodeUnit("Terran Academy"))
    # (Line 27) /* TEST */ bwrite(0x59CCA8 + 336 + 0x4C, $P2);
    f_bwrite(0x59CCA8 + 336 + 0x4C, 1)
    # (Line 29) epdswitch (unit + 0x64/4, 255) {
    EPDSwitch(unit + 0x64 // 4, 255)
    # (Line 30) case $U("Terran Academy"):
    _t4 = EUDSwitchCase()
    # (Line 31) sprintf(namePtr, "Ticket {}, Ore {}, Gas {}", Ticket[unit.owner], Ore[unit.owner], Gas[unit.owner]);
    if _t4(EncodeUnit("Terran Academy")):
        f_sprintf(namePtr, "Ticket {}, Ore {}, Gas {}", Ticket[unit.owner], Ore[unit.owner], Gas[unit.owner])
        # (Line 32) sprintf(rankPtr, "{}", unit.unitType);
        f_sprintf(rankPtr, "{}", unit.unitType)
        # (Line 33) break;
        EUDBreak()
        # (Line 34) unitTypes.extend((EUDGetLastBlockOfName("swblock"))[1][py_str("casebrlist")].keys());
        unitTypes.extend((EUDGetLastBlockOfName("swblock"))[1][str("casebrlist")].keys())
        # (Line 35) }
    # (Line 36) once {
    EUDEndSwitch()
    _t5 = EUDExecuteOnce()
    if _t5():
        # (Line 37) const actions = py_list();
        actions = list()
        # (Line 38) foreach(unitType : unitTypes) {
        for unitType in unitTypes:
            # (Line 39) actions.append(SetMemoryX(
            # (Line 40) 0x660260 + 2 * unitType,
            # (Line 41) SetTo,
            # (Line 42) NAME_STR << (16 * (unitType % 2)),
            # (Line 43) 0xFFFF << (16 * (unitType % 2))
            # (Line 44) ));
            actions.append(SetMemoryX(0x660260 + 2 * unitType, SetTo, _LSH(NAME_STR,(16 * (unitType % 2))), _LSH(0xFFFF,(16 * (unitType % 2)))))
            # (Line 45) }
            # (Line 46) DoActions(actions);

        DoActions(actions)
        # (Line 47) }
        # (Line 49) setcurpl(getuserplayerid());
    EUDEndExecuteOnce()
    f_setcurpl(f_getuserplayerid())
    # (Line 50) DisplayText(NAME_STR);
    # (Line 51) const tests = "Ticket 1, Ore 3, Gas 5\0", "{}\0".format($U("Terran Academy"));
    DoActions(DisplayText(NAME_STR))
    tests = "Ticket 1, Ore 3, Gas 5\0", "{}\0".format(EncodeUnit("Terran Academy"))
    # (Line 52) return memcmp(namePtr, Db(tests[0]), py_len(tests[0].encode("utf-8"))),
    # (Line 53) memcmp(rankPtr, Db(tests[1]), py_len(tests[1].encode("utf-8")));
    EUDReturn(f_memcmp(namePtr, Db(tests[0]), len(tests[0].encode("utf-8"))), f_memcmp(rankPtr, Db(tests[1]), len(tests[1].encode("utf-8"))))
    # (Line 54) }
